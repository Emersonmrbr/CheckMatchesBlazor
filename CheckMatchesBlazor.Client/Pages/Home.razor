@page "/"
@* @implements IDisposable *@
@inject ILogger<CheckMatches> Logger
@inject IConfiguration Config

<PageTitle>Check Matches</PageTitle>

<h3>Check Matches</h3>

<EditForm Model="Model" OnValidSubmit="OnValidSubmit" FormName="CheckMatche" class="form-floating">
    <DataAnnotationsValidator />
    <div class="row g-2 mb-6">
        <div class="col">
            <div class="row">
                <div class="col-md-2">
                    <div class="form-floating">
                        <InputNumber @bind-Value="Model!.Result![0]" Min="1" Max="60" step="1" class="form-control" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <InputNumber @bind-Value="Model!.Result![1]" Min="1" Max="60" step="1" class="form-control" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <InputNumber @bind-Value="Model!.Result![2]" Min="1" Max="60" step="1" class="form-control" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <InputNumber @bind-Value="Model!.Result![3]" Min="1" Max="60" step="1" class="form-control" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <InputNumber @bind-Value="Model!.Result![4]" Min="1" Max="60" step="1" class="form-control" />
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <InputNumber @bind-Value="Model!.Result![5]" Min="1" Max="60" step="1" class="form-control" />
                    </div>
                </div>
            </div>
            <p></p>
            <div class="row">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupFile01">Upload bets</label>
                    <InputFile type="file" class="form-control" id="inputGroupFile01" OnChange="LoadFiles" multiple />
                </div>
            </div>
        </div>
        <div class="col">
            <div class="col-md">
                <p>Result Summary</p>
                <p><ValidationSummary /></p>
                <p>@Logger</p>
                <p>@($"Bets with at least one compatible number ({Model!.MessageResults!.Count})")</p>
                <p>@($"Match result ({Model!.MatchResult!.Count})")</p>

                @if (success)
                {
                    <p>Success</p>
                    @foreach (var result in Model!.MatchResult!)
                    {
                        <p>@result</p>
                    }
                }
            </div>
        </div>
    </div>
    <p></p>
    <div class="d-grid gap-2 col-2">
        <button type="submit" class="btn btn-outline-success btn-lg">Check</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private BetsCheck? Model { get; set; } = new();

    protected override void OnInitialized() => Model ??= new()
        {
            Matches = 0,
            MatchResult = [],
            MessageResults = [],
            Result = []
        };

    private List<string> errors = new();

    bool success = false;

    public class BetsCheck
    {
        [Required]
        public List<int>? Result { get; set; } = [1, 4, 20, 28, 57, 59];

        public List<string>? MessageResults { get; set; } = new();

        public int? Matches { get; set; } = 0;

        public List<string>? MatchResult { get; set; } = new();

    }

    public class Bets
    {

        public int Row { get; set; }
        public List<int>? Numbers { get; set; }
    }

    public class BetReport
    {
        public string DevelopedBy { get; set; } = "Nucleus MAP, Machines, Automation, and Programming";
        public string DevelopedOnDate { get; set; } = "Monday, December 09, 2024";
        public string DeveloperURL { get; set; } = "http://nucleomap.com.br";
        public string DeveloperEmail { get; set; } = "nucleomap@nucleomap.com.br";
        public string Version { get; set; } = "1.0";
        public string GeneratedBy { get; set; } = Environment.UserName;
        public string GeneratedOnDate { get; set; } = DateTimeOffset.Now.ToString("F");
        public string StationName { get; set; } = Environment.MachineName;
        public string OSVersion { get; set; } = Environment.OSVersion.ToString();
        public int TotalResults { get; set; }
        public int TotalMatches { get; set; }
        public List<Bets> BettingResult { get; set; } = [];
    }

    private void OnValidSubmit()
    {

        string startFolder = "C:\\Windows\\Temp\\unsafe_uploads";
        string pathResult = "bets_result";
        DirectoryInfo dir = new(startFolder);
        var fileList = dir.GetFiles("*.*", SearchOption.AllDirectories);
        var fileQuery = from file in fileList
                        where file.Extension == ".json"
                        orderby file.Name
                        select file;

        foreach (FileInfo fi in fileQuery)
        {
            // Load bets from a JSON file
            List<Bets> bets = LoadBets(fi.FullName);

            // Define the winning numbers
            List<int> gameResult = Model!.Result!;

            // Initialize results
            List<Bets> bettingResult = [];
            int match = 0;
            Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, pathResult));
            string outFileName = Path.Combine("C:\\Windows\\Temp", pathResult, fi.Name);


            // Process each bet
            foreach (var bet in bets!)
            {
                // Compare bet numbers with the game result
                List<int> matchNumbers = CompareNumbers(bet, gameResult);

                if (matchNumbers.Count > 0)
                {
                    // Add bet to the result list if numbers matched
                    bettingResult.Add(new Bets
                        {
                            Row = bet.Row,
                            Numbers = matchNumbers,
                        });
                    Model.MessageResults!.Add($"Result in row {bet.Row} matches these numbers: {string.Join(", ", matchNumbers)}");
                    Console.WriteLine($"Result in row {bet.Row} matches these numbers: {string.Join(", ", matchNumbers)}");
                }
                else
                {
                    Model.MessageResults!.Add($"Result in row {bet.Row} doesn't match any number.");
                    Console.WriteLine($"Result in row {bet.Row} doesn't match any number.");
                }

                // Increment the match counter for perfect matches
                if (matchNumbers.Count == gameResult.Count)
                {

                    match++;
                    Model.Matches = match;
                    Model.MatchResult!.Add($"Result in row {bet.Row} matches these numbers: {string.Join(", ", matchNumbers)} in file {fi.Name}");
                    success = true;
                }
            }

            Console.WriteLine($"\nTotal of winning bets: {match} in {fi.Name}\n");

            // Save results as JSON
            SaveDeleteResultsAsJson(new BetReport
                {
                    TotalResults = bettingResult.Count,
                    TotalMatches = match,
                    BettingResult = bettingResult
                }, outFileName);
        }

        Logger.LogInformation("Submit: Processing form");

        StateHasChanged();
    }


    public static void SaveDeleteResultsAsJson(BetReport bets, string outFileName)
    {
        string fileName = string.Concat(outFileName, ".json");
        string json = JsonSerializer.Serialize(bets);
        File.WriteAllText(fileName, json);
    }

    public static List<Bets> LoadBets(string fileName)
    {
        string json = File.ReadAllText(fileName);
        Dictionary<string, List<Bets>>? bets = JsonSerializer.Deserialize<Dictionary<string, List<Bets>>>(json);
        return bets!["Bets"];
    }

    public static List<int> CompareNumbers(Bets bet, List<int> gameResult)
    {
        List<int> matchedBets = [];

        // Check each number in the bet against the game result
        foreach (var number in bet!.Numbers!)
        {
            if (gameResult.Contains(number))
            {
                matchedBets.Add(number);
            }
        }
        return matchedBets;
    }


    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 1024 * 3;
    private int maxAllowedFiles = 5;
    private bool isLoading;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (e.FileCount > maxAllowedFiles)
            {
                Logger.LogError($"Error: Attempting to upload {e.FileCount} files, but only {maxAllowedFiles} files are allowed");
                return;
            }
            try
            {
                var trustedFileName = Path.ChangeExtension(file.Name, Path.GetExtension(file.Name));
                var path = Path.Combine(Config.GetValue<string>("FileStorage")!, "unsafe_uploads",
                    trustedFileName);
                Directory.CreateDirectory(Path.Combine(Config.GetValue<string>("FileStorage")!, "unsafe_uploads"));

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                loadedFiles.Add(file);

                Logger.LogInformation($"Unsafe Filename: {trustedFileName} File saved: {file.Name}");
            }
            catch (Exception ex)
            {
                Logger.LogError($"File: {file.Name} Error: {ex.Message}");
            }
        }

        isLoading = false;
    }
}
